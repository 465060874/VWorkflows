apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: 'jdkdetect.gradle'
apply from: 'version-info.gradle'
//apply from: 'maven-deployment.gradle'
apply from: 'maven-deployment-local.gradle'

// all projects must be comatible with the java version specified here
// overriding this property in subprojects is not allowed
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
//repairHeaders.licenseHeaderText = new File(projectDir,'../license-template.txt')

repositories {
    
    mavenLocal()
    
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}


dependencies {

    compile "com.thoughtworks.xstream:xstream:1.4.7"
    
    println("Gradle uses JDK "+project.jdk)

    // compile project('..:VRLInstrumentation')    
    // compile fileTree (dir: 'path-to-libdir', includes: ['*.jar'])
    
    testCompile 'junit:junit:4.11'
}


mainClassName =  "eu.mihosoft.vrl.workflow.playground.Playground"

// -- coverage support (jacoco/coveralls) --

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}


apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'


// multiproject coverage report
// http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/
task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath)
    .include("**/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    allprojects.each {
        
        if (it.name!="vworkflows-fx") {
            sourceSets it.sourceSets.main
        }
    }

    reports {
        // xml reports are used for coveralls
        xml.enabled true
        xml.destination = "${buildDir}/reports/jacoco/xml/report.xml"
        
        // html for uploading to webserver
        html.enabled true
        html.destination "${buildDir}/reports/jacoco/html"
        
        // we don't need csv
        csv.enabled false
    }
}

coveralls {
    
    // specify jacoco xml report location
    jacocoReportPath = "${project.buildDir}/reports/jacoco/xml/report.xml"
    
    // add sources from the subprojects
    sourceDirs = files(project.sourceSets.main.allSource.srcDirs).files.absolutePath
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    allprojects*.test
}